options
{
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(Jmm)

import pt.up.fe.comp.jmm.report.*;
import java.util.ArrayList;
import java.util.List;
public class Jmm
{
    public List<Report> reports = new ArrayList<Report>();

    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		Jmm myJmm = new Jmm(System.in);

		SimpleNode root = myJmm.Program(); // returns reference to root node
    }

    // Hooks
    private void jjtreeOpenNodeScope(Node n) {
        SimpleNode sn = (SimpleNode) n;
        Token t = getToken(1);
        sn.put("line", Integer.toString(t.beginLine));
        sn.put("col", Integer.toString(t.beginColumn));
    }

    private void jjtreeCloseNodeScope(Node n) {}

}

PARSER_END(Jmm)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}

/*
 * Comments copied from java
 */
<DEFAULT> MORE : { "//" : IN_SINGLE_LINE_COMMENT
                 | <"/**" ~["/"]> : IN_FORMAL_COMMENT
                 | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN : {
  <FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT> MORE : {
  <~[]>
}

TOKEN:
{
        <IntegerLiteral: <DECIMAL_LITERAL> (["l","L"])?
        | <HEX_LITERAL> (["l","L"])?
        | <OCTAL_LITERAL> (["l","L"])?
        | <BINARY_LITERAL> (["l","L"])?>
        | <#DECIMAL_LITERAL: ["1"-"9"] (("_")* ["0"-"9"])*>
        | <#HEX_LITERAL: "0" ["x","X"] ["0"-"9","a"-"f","A"-"F"] (("_")* ["0"-"9","a"-"f","A"-"F"])*>
        | <#OCTAL_LITERAL: "0" (("_")* ["0"-"7"])*>
        | <#BINARY_LITERAL: "0" ["b","B"] ["0","1"] (("_")* ["0","1"])*>
        |   < Import: "import" >
        |   < Open_Bracket: "{" >
        |   < Close_Parenthesis: ")" >
        |   < Class: "class" >
        |   < Extends: "extends" >
        |   < Public: "public" >
        |   < Boolean: "boolean" >
        |   < Static: "static" >
        |   < Void: "void" >
        |   < If: "if" >
        |   < Else: "else" >
        |   < While: "while" >
        |   < String: "String" >
        |   < True: "true" >
        |   < False: "false" >
        |   < This: "this" >
        |   < New: "new" >
        |   < And: "&&" >
        |   < Length: "length" >
        |   < Main: "main" >
        |   < Int: "int" >
        |   < Return: "return" >
        |   < Identifier: (["a"-"z","A"-"Z","$"](["a"-"z","A"-"Z","0"-"9","_","$"])* | ("_")(["a"-"z","A"-"Z","0"-"9","_","$"])+) >
}

// ImportDeclaration, ClassDeclaration, EOF
SimpleNode Program() #Program : {}
{

   ImportDeclarations()
   ClassDeclaration()
   <EOF> {return jjtThis;}
}

// {"import", Identifier,{”.”,Identifier },";"}
void ImportDeclarations() #void : {Token t; String acc;}
{
   ((<Import> t=<Identifier>{acc = t.image;} ("." t=<Identifier>{acc += "." + t.image;})* ";" {jjtThis.put("import",acc);}) #ImportDeclaration )*
}

//"class",Identifier,["extends",Identifier],"{",{VarDeclaration},{MethodDeclarationPublic}"}"
void ClassDeclaration() #ClassDeclaration : {Token t, t2;}
{
  <Class> t=<Identifier>{jjtThis.put("name",t.image);}
  [<Extends> t2=<Identifier>{jjtThis.put("extends",t2.image);}]
  "{" (VarDeclaration())* (<Public> MethodDeclaration())* "}"
}


//Type,Identifier,";"
void VarDeclaration() #VarDeclaration : {Token t;}
{
   Symbol() ";"
}

//Type,Identifier,"(",[Type,Identifier,{",",Type,Identifier},],")","{",{VarDeclaration},{Statement},"return",Expression,";","}"
//"static","void","main","(","String","[","]",Identifier,")","{",{VarDeclaration}, {Statement},"}";
void MethodDeclaration() #MethodDeclaration : {Token t;}
{
   ((Symbol() "(" [Symbol() ("," Symbol() )*] ")") #MethodHeader)
       ("{" (LOOKAHEAD(2) VarDeclaration())* (Statement())* <Return> Expression() #Return ";" "}") #MethodBody
   |
   ((<Static> <Void> <Main> "(" <String> "[" "]" t=<Identifier>{jjtThis.put("stringArrayName", t.image);} ")") #Main) ("{" (LOOKAHEAD(2) VarDeclaration())* (Statement())* "}") #MainBody
}

//Statement =
//     "{",{Statement},"}"
//    |"if","(",Expression,")",Statement,"else",Statement
//    |"while","(",Expression,")",Statement
//    |Expression,";"
//    |Identifier,StatementIdentifier
//;

void Statement() #void : {Token t;}
{
        CompoundStatement()|
        SelectionStatement()|
        IterationStatement()|
        ([LOOKAHEAD(2) t=<Identifier>{jjtThis.put("object",t.image); jjtThis.put("type", "object");}#Value ["[" Expression() #Indexing(2)"]"] "=" ]  Expression() ";") #Statement
}

void CompoundStatement() #CompoundStatement : {}
{
    "{" (Statement())* "}"
}

void SelectionStatement() #SelectionStatement : {}
{
    "if" "(" Expression() ")" Statement() "else" Statement()
}

void IterationStatement() #IterationStatement : {}
{
    "while"
    try
    {
       "(" Expression() ")"
    }
    catch(ParseException e){
        String exception = e.toString();
        int line = Integer.parseInt(exception.split("line ")[1].split(",")[0]); //gets error line
        int column =  Integer.parseInt(exception.split("column ")[1].split("\\.")[0]); //gets error column
        this.reports.add(new Report(ReportType.ERROR,Stage.SYNTATIC,line,column , "Error parsing while expression" ));
        error_skipto(Close_Parenthesis);
    }
    Statement()
}

JAVACODE
void error_skipto(int kind) {
    Token t = getToken(0);
    while (t.next.kind != EOF && t.next.kind != kind) {
        t = getNextToken();
        Token wtv = getToken(1);
    }

    while (getToken(1).kind == kind) {
        t = getNextToken();
    }
}


// "int","[","]" | "boolean" | "int" | Identifier
void Type() #Type: {Token t;String isArray="false";}
{
    (
        <Int>{jjtThis.put("type","int");} ["[" "]" {isArray="true";}]
        | <Boolean> {jjtThis.put("type","boolean");}
        | t=<Identifier>{jjtThis.put("type",t.image);}
    ){jjtThis.put("array",isArray);}
}

// int Memes
void Symbol() #Symbol: {Token t;}
{
    Type() t=<Identifier>{jjtThis.put("name",t.image);}
}

void Expression() #void: {}
{
    LogicalANDExpression()
}

void LogicalANDExpression() #void : {}
{
	RelationalExpression() [ <And>  LogicalANDExpression() {jjtThis.put("op", "AND");} #BinaryOp(2) ]
}

void RelationalExpression() #void : {}
{
	AdditiveExpression() [ "<" RelationalExpression() {jjtThis.put("op", "LESSER");} #BinaryOp(2) ]
}

void AdditiveExpression() #void : {}
{
	MultiplicativeExpression() [ "+" AdditiveExpression() {jjtThis.put("op", "ADD");} #BinaryOp(2)
	                            | "-" AdditiveExpression() {jjtThis.put("op", "SUBTRACT");} #BinaryOp(2)]
}

void MultiplicativeExpression() #void : {}
{
	 NotExpression() [ "*" MultiplicativeExpression() {jjtThis.put("op", "MULTIPLY");} #BinaryOp(2)
	                   | "/" MultiplicativeExpression() {jjtThis.put("op", "DIVIDE");} #BinaryOp(2)]
}

void NotExpression() #void : {}
{
     "!" PostfixExpression() {jjtThis.put("op", "NEG");} #UnaryOp(1)
     | PostfixExpression()

}

void PostfixExpression() #void : {Token t;}
{
	ExpTerm() ( "[" Expression() #Indexing(2) "]" |
                  "." (<Length> #Length(1)
                      | MethodCall() #MethodCall(2) )
                  )*
}

void MethodCall() #Method : {Token t;}
{
	t=<Identifier> "(" [ArgumentExpressionList()] ")"{jjtThis.put("methodName",t.image);}

}

void ArgumentExpressionList() #void : {}
{
	Expression() ( "," Expression() )*
}

void ExpTerm() #void: {Token t;}
{
    t=<IntegerLiteral>{jjtThis.put("object",t.image); jjtThis.put("type", "int");} #Value
    | t=<True>{jjtThis.put("object",t.image); jjtThis.put("type", "boolean");} #Value
    | t=<False>{jjtThis.put("object",t.image); jjtThis.put("type", "boolean");} #Value
    | t=<This>{jjtThis.put("object",t.image); jjtThis.put("type", "this");} #Value
    | <New> (t=<Identifier>{jjtThis.put("classObj", t.image); jjtThis.put("type", "object");} #ClassObj "(" ")"  | <Int> "[" Expression() "]" #Array(1)) {jjtThis.put("op", "NEW");} #UnaryOp(1)
    | "(" Expression() ")"
    | t=<Identifier>{jjtThis.put("object",t.image); jjtThis.put("type", "object");} #Value
}
