import io;
import BubbleSortTest;
BubbleSort {

	.construct BubbleSort().V {
		invokespecial(this, "<init>").V;
	}

	.method public sort0(a.array.i32).array.i32 {
		
		finishedd.bool :=.bool 0.bool;
		
		len.i32 :=.i32 arraylength($1.a.array.i32).i32;
		
		len.i32 :=.i32 len.i32 -.i32 1.i32;
		
		Loop1:
			if (finishedd.bool !.bool finishedd.bool) goto EndLoop1;
			finishedd.bool :=.bool 1.bool;
			countter.i32 :=.i32 0.i32;
			Loop0:
			if (countter.i32 <.bool len.i32) goto EndLoop0;
			nextt.i32 :=.i32 countter.i32 +.i32 1.i32;
			if($1.a[nextt.i32].i32 <.bool $1.a[countter.i32].i32) goto Else0;
			ttemp.i32 :=.i32 $1.a[countter.i32].i32;
			$1.a[countter.i32].i32 :=.i32 $1.a[nextt.i32].i32;
			$1.a[nextt.i32].i32 :=.i32 ttemp.i32;
			finishedd.bool :=.bool 0.bool;
			goto Endif0;
		Else0:
		Endif0:
			countter.i32 :=.i32 countter.i32 +.i32 1.i32;
			goto Loop0;
		EndLoop0:
		
			goto Loop1;
		EndLoop1:
		
		ret.array.i32 $1.a.array.i32;
	}

	.method public static main(args.array.String).V  {
		
		size.i32 :=.i32 0.i32;
		
		Loop2:
			if (size.i32 <.bool 1.i32) goto EndLoop2;
			size.i32 :=.i32 invokestatic(BubbleSortTest, "getArraySize").i32;
			goto Loop2;
		EndLoop2:
		
		bs.BubbleSort :=.BubbleSort new(BubbleSort).BubbleSort;
		invokespecial(bs.BubbleSort, "<init>").V;
		
		inputt.array.i32 :=.array.i32 new(array, size.i32).array.i32;
		
		countter.i32 :=.i32 0.i32;
		
		nexttValue.i32 :=.i32 0.i32;
		
		Loop3:
			if (countter.i32 <.bool size.i32) goto EndLoop3;
			nexttValue.i32 :=.i32 invokestatic(BubbleSortTest, "getInput").i32;
			inputt[countter.i32].i32 :=.i32 nexttValue.i32;
			countter.i32 :=.i32 countter.i32 +.i32 1.i32;
			goto Loop3;
		EndLoop3:
		
		resultt.array.i32 :=.array.i32 invokevirtual(bs.BubbleSort, "sort0", inputt.array.i32).array.i32;
		
		invokestatic(BubbleSortTest, "printResult", resultt.array.i32).V;

		ret.V;
	}

}